name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  # Database configuration
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Install Docker Compose
    - name: Install Docker Compose
      run: |
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

    - name: Initialize Databases
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PGUSER: ${{ env.POSTGRES_USER }}
      run: |
        # Wait for PostgreSQL to be ready
        sleep 5
        
        # Run init.sql to create and initialize all databases
        psql -h localhost -f init-db/init.sql

    - name: Run Tests
      run: |
        docker compose -f docker-compose.yml build test
        docker compose -f docker-compose.yml run --rm \
          -e POSTGRES_HOST=postgres \
          -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
          -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
          -e DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@postgres:5432/python_tododb_test \
          -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/java_tododb_test \
          -e SPRING_DATASOURCE_USERNAME=${{ env.POSTGRES_USER }} \
          -e SPRING_DATASOURCE_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
          -e POSTGRES_DB=node_tododb_test \
          test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and push Python API
      uses: docker/build-push-action@v4
      with:
        context: ./python_app
        push: true
        tags: ${{ env.DOCKERHUB_USERNAME }}/python-api:latest

    - name: Build and push Node API
      uses: docker/build-push-action@v4
      with:
        context: ./node_app
        file: ./node_app/Dockerfile.prod
        push: true
        tags: ${{ env.DOCKERHUB_USERNAME }}/node-api:latest

    - name: Build and push Java API
      uses: docker/build-push-action@v4
      with:
        context: ./java_app
        push: true
        tags: ${{ env.DOCKERHUB_USERNAME }}/java-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Copy docker-compose and init files to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        source: "docker-compose.prod.yml,init-db/"
        target: "/opt/todo-app"

    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/todo-app
          echo "DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}" > .env
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f