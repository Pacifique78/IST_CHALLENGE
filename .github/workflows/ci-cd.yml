name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build Java project
      run: |
        cd java_app
        ./mvnw clean package -DskipTests
        cd ..

    - name: Get Maven dependencies path
      id: get-maven-path
      run: |
        echo "MAVEN_PATH=$(cd java_app && ./mvnw help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Test
      run: |
        docker compose build
        docker compose up -d db
        sleep 15
        docker compose exec -T db psql -U postgres -c "\l"
        docker compose run test
        docker compose down

    - name: Create sonar-project.properties
      run: |
        echo "sonar.projectKey=ist-challenge
        sonar.projectName=ist-challenge
        sonar.projectVersion=1.0
        sonar.sources=.
        sonar.java.source=17
        sonar.java.binaries=java_app/target/classes
        sonar.java.test.binaries=java_app/target/test-classes
        sonar.java.libraries=${{ env.MAVEN_PATH }}/**/*.jar
        sonar.coverage.exclusions=**/*.java
        sonar.exclusions=**/target/**,**/node_modules/**,**/.git/**,**/.github/**
        sonar.host.url=https://test.ist-challenge.i-skip.com
        sonar.login=${{ secrets.SONAR_TOKEN }}
        sonar.sourceEncoding=UTF-8
        sonar.java.source.folder=java_app/src/main/java
        sonar.java.test.folder=java_app/src/test/java" > sonar-project.properties

    - name: Debug SonarQube config
      run: |
        echo "Content of sonar-project.properties:"
        cat sonar-project.properties
        echo "Maven repository location:"
        echo ${{ env.MAVEN_PATH }}
        echo "Java binaries location:"
        ls -la java_app/target/classes
        echo "Maven dependencies:"
        ls -la ${{ env.MAVEN_PATH }}

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: "https://test.ist-challenge.i-skip.com"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Python API
      uses: docker/build-push-action@v5
      with:
        context: ./python_app
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-api:latest

    - name: Build and push Node API
      uses: docker/build-push-action@v5
      with:
        context: ./node_app
        file: ./node_app/Dockerfile.dev
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/node-api:latest

    - name: Build and push Java API
      uses: docker/build-push-action@v5
      with:
        context: ./java_app
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/java-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Copy docker-compose.prod.yml to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        port: ${{ secrets.SSH_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.prod.yml"
        target: "${{ secrets.PROJECT_PATH }}"

    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        port: ${{ secrets.SSH_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.PROJECT_PATH }}
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d
          docker image prune -f